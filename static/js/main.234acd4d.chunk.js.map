{"version":3,"sources":["utils/gifurl.js","secrets.js","actions/gif.js","utils/massage.js","reducers/gifReducer.js","reducers/rootReducer.js","components/FrontCard.js","components/BackCard.js","components/GridItem.js","utils/date.js","components/Gallery.js","components/Theme.js","containers/CalendarPage.js","App.js","index.js","store.js"],"names":["apiKey","searchEndPoint","rating","randomOffset","Math","floor","random","concat","fetchGifList","offset","dispatch","getState","url","theme","searchTerm","generateUrl","gifReducer","axios","get","then","res","data","obj","gifArr","type","list","shuffle","map","gif","i","id","images","original","flipped","err","console","log","initialState","randomGif","combineReducers","state","arguments","length","undefined","action","Object","assign","FrontCard","props","react_default","a","createElement","className","date","BackCard","src","alt","GridItem","title","flip","Number","replace","onClick","handleFlip","components_FrontCard","components_BackCard","Gallery","gifObj","src_components_GridItem","key","options","Theme","option","themeChange","require","update","set","CalendarPage","componentDidMount","_this","loadData","currentState","status","updatedData","handleThemeChange","setTheme","handleRandom","_this$props","this","role","aria-label","src_components_Theme","src_components_Gallery","Component","connect","setGifTheme","newList","App","src_containers_CalendarPage","ReactDOM","render","es","store","createStore","rootReducer","applyMiddleware","thunk","logger","configureStore","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.234acd4d.chunk.js","sourcesContent":["import {\n    giphyKey\n} from '../secrets';\n\nconst apiKey = giphyKey;\nconst searchEndPoint = \"https://api.giphy.com/v1/gifs/search?\";\nconst randomEndpoint = \"https://api.giphy.com/v1/gifs/random?\";\nconst rating = 'g';\n\nconst randomOffset = Math.floor(Math.random() * 50);\n\nexport function generateUrl(theme, offset) {\n\n    let searchTerm = theme ? theme : 'puppies';\n    offset = offset ? randomOffset : 0;\n    let limit = 25;\n    let url = `${searchEndPoint}&api_key=${apiKey}&q=${\n        searchTerm}&limit=${limit}&offset=${offset}&rating=${rating}`;\n    return url;\n}\n\nexport const randomUrl = `${randomEndpoint}&rating=${rating}`","export const giphyKey = 'XpB6o45U81kLXQZ85uObU8tOQWlSNUEg';","import axios from 'axios';\nimport {\n    generateUrl,\n    randomUrl\n} from '../utils/gifurl';\n\nimport {\n    massageData\n} from '../utils/massage';\n\n// action types \nexport const GET_NEW_GIF = 'GET_NEW_GIF';\nexport const SET_GIF_THEME = 'SET_GIF_THEME';\nexport const SET_GIF_LIST = 'SET_GIF_LIST';\nexport const FLIP = \"FLIP\";\n\n// action creators \nconst getNewGif = (gif) => ({\n    type: GET_NEW_GIF,\n    gif\n})\n\nexport const setGifTheme = (theme) => ({\n    type: SET_GIF_THEME,\n    theme\n})\n\nexport const setGifList = (list) => ({\n    type: SET_GIF_LIST,\n    list\n})\n\nexport const flip = (data) => ({\n    type: FLIP,\n    data\n})\n\n\n// thunk creators \nexport const fetchRandomGif = () =>\n    dispatch =>\n    axios.get(randomUrl)\n    .then(res => res.data)\n    .then(obj => dispatch(getNewGif(obj.data)))\n    .then(err => console.log(err));\n\n// changes the theme and then causes the gif set to load \n\nexport const fetchGifList = (offset) =>\n    (dispatch, getState) => {\n        const theme = getState().gifReducer.theme;\n        let url = generateUrl(theme, offset);\n        axios.get(url)\n            .then(res => res.data)\n            .then(obj => dispatch(\n                setGifList(massageData(obj.data))\n            ))\n            .then(err => console.log(err));\n    }","import shuffle from 'lodash/shuffle';\n\nexport function massageData(gifArr) {\n    const shuffledArr = shuffle(gifArr);\n    return shuffledArr.map((gif, i) => {\n        return {\n            id: i,\n            gif: gif.images.original.url,\n            flipped: false\n        }\n    })\n}","import {\n  GET_NEW_GIF,\n  SET_GIF_THEME,\n  SET_GIF_LIST,\n  FLIP\n} from '../actions/gif';\n\nconst initialState = {\n  randomGif: {},\n  theme: 'puppies',\n  data: []\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case GET_NEW_GIF:\n      return Object.assign({}, state, {\n        randomGif: action.gif\n      })\n    case SET_GIF_THEME:\n      return Object.assign({}, state, {\n        theme: action.theme\n      })\n    case SET_GIF_LIST:\n      return Object.assign({}, state, {\n        data: action.list\n      })\n    case FLIP:\n      return Object.assign({}, state, {\n        data: action.data\n      })\n\n    default:\n      return state\n  }\n}","import { combineReducers } from 'redux';\nimport gifReducer from './gifReducer';\n\nexport default combineReducers({\n gifReducer\n});\n","import React from \"react\";\n\nconst FrontCard = props => {\n  return <div className=\"front card\">\n  <span className='card-title' > {props.date} </span>\n  </div>;\n};\n\nexport default FrontCard;\n","import React from \"react\";\n\nconst BackCard = props => {\n  let gif = props.gif;\n  return (\n    <div className=\"back card\">\n      <img src={gif && gif} alt=\"some img\" />\n    </div>\n  );\n};\n\nexport default BackCard;\n","import React from \"react\";\nimport FrontCard from \"./FrontCard\";\nimport BackCard from \"./BackCard\";\n\nimport \"./GridItem.css\";\nimport { getDate } from \"../utils/date\";\n\nconst GridItem = props => {\n  const flip = props.flipped ? \"flip\" : \"\";\n  const date = getDate(props.title);\n  const id = date - 1;\n  return (\n    <div className=\"griditem-container\" onClick={() => props.handleFlip(id)}>\n      <div className={`griditem ${flip}`}>\n        <FrontCard date={date} />\n        <BackCard gif={props.gif} />\n      </div>\n    </div>\n  );\n};\n\nexport default GridItem;\n","export function getDate(title) {\n    let date = Number(title.replace(/griditem-/gi, ''));\n    return date + 1;\n}","import React from \"react\";\nimport GridItem from \"./GridItem\";\n\nimport \"./Gallery.css\";\n\nconst Gallery = props => {\n  const generateGrid = data => {\n    return data.map(gifObj => {\n      let id = gifObj.id;\n      return (\n        <GridItem\n          key={`griditem${id}`}\n          title={`griditem-${id}`}\n          handleFlip={props.handleFlip}\n          gif={gifObj.gif}\n          flipped={gifObj.flipped}\n        />\n      );\n    });\n  };\n  return (\n    <div className=\"grid-container\">\n      <div className=\"grid-title\">\n        <h1> Gif Advent Calendar - {props.theme} </h1>\n      </div>\n      <div className=\"grid\">{generateGrid(props.data)}</div>\n    </div>\n  );\n};\n\nexport default Gallery;\n","import React from \"react\";\n\nimport \"./Theme.css\";\n\nconst options = [\"puppies\", \"christmas\", \"superman\", \"disney\"];\n\nconst Theme = props => {\n  return (\n    <div className=\"theme-container\">\n      Select a theme:\n      {options.map(option => {\n        return (\n          <span\n            key={option}\n            className=\"theme-option\"\n            onClick={() => props.themeChange(option)}\n          >\n            <span> {option}</span>\n          </span>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Theme;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Gallery from \"../components/Gallery\";\nimport Theme from \"../components/Theme\";\n\nimport \"./CalendarPage.css\";\nimport { setGifTheme, fetchGifList, flip } from \"../actions/gif\";\n\nconst { update, set } = require(\"immutable\");\n\nclass CalendarPage extends Component {\n  componentDidMount = () => {\n    this.props.loadData();\n  };\n\n  handleFlip = id => {\n    const currentState = this.props.data;\n    const status = currentState[id].flipped ? false : true;\n\n    const updatedData = update(currentState, id, obj =>\n      set(obj, \"flipped\", status)\n    );\n\n    this.props.flip(updatedData);\n  };\n  handleThemeChange = option => {\n    // if the same option is clicked again offset the results\n    let offset = this.props.theme === option;\n    this.props.setTheme(option, offset);\n  };\n\n  handleRandom = () => {\n    let random = Math.floor(Math.random() * 25);\n    this.handleFlip(random);\n  };\n\n  render() {\n    const { theme, data } = this.props;\n    return (\n      <div className={`${theme}-background`}>\n        <span\n          className=\"sticky\"\n          role=\"img\"\n          aria-label=\"magic-ball\"\n          onClick={this.handleRandom}\n        >\n          🔮\n        </span>\n        <Theme themeChange={this.handleThemeChange} />\n        <Gallery handleFlip={this.handleFlip} data={data} theme={theme} />\n      </div>\n    );\n  }\n}\n\nconst mapState = state => {\n  return {\n    theme: state.gifReducer.theme,\n    data: state.gifReducer.data\n  };\n};\n\nconst mapDispatch = dispatch => {\n  return {\n    loadData() {\n      dispatch(fetchGifList());\n    },\n    setTheme(theme, offset) {\n      dispatch(setGifTheme(theme));\n      dispatch(fetchGifList(offset));\n    },\n    flip(newList) {\n      dispatch(flip(newList));\n    }\n  };\n};\n\nexport default connect(\n  mapState,\n  mapDispatch\n)(CalendarPage);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport \"./App.css\";\nimport CalendarPage from \"./containers/CalendarPage\";\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div>\n        <CalendarPage />\n      </div>\n    );\n  }\n}\n\nexport default connect()(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport configureStore from \"./store\";\n\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <Provider store={configureStore()}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n","import {\n  createStore,\n  applyMiddleware\n} from 'redux';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\nimport rootReducer from './reducers/rootReducer';\n\nexport default function configureStore(initialState = {}) {\n  return createStore(\n    rootReducer,\n    applyMiddleware(thunk, logger)\n  );\n}"],"sourceRoot":""}